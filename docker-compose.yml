version: '2.1'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_graph: {}
    postgres_agent: {}
    nginx_certs: {}
    nginx_vhost: {}
    nginx_html: {}
    pgadmin: {}
services:

# ------------------------------QUERY--------------------------
  query-node-0:
    image: ${IMAGE_QUERY}
    container_name: query-node-0
    depends_on:
      - postgres-graph
      - fluentd
    environment:
      node_role: "query-node"
      node_id: "query-node-0"
      postgres_host: postgres-graph
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-let-me-in}
      postgres_db: ${DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT}'
      ethereum: '${GNOSIS}'
      RUST_LOG: info
      GRAPH_LOG_QUERY_TIMING: gql
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-true}
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: ${FULLTEXT_SEARCH:-true}
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: query-node-0
    expose:
      - 8001
      - 8000
      - 8030
      - 8040
    networks:
      - monitor-net
# ------------------------------INDEX--------------------------
  index-node-0:
    image: ${IMAGE_INDEX}
    container_name: index-node-0
    depends_on:
      - postgres-graph
      - fluentd
    environment:
      node_role: "index-node"
      node_id: "index-node-0"
      postgres_host: postgres-graph
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-let-me-in}
      postgres_db: ${DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT}'
      ethereum: '${GNOSIS}'
      RUST_LOG: info
      BLOCK_INGESTOR: "index-node-0" # Only need to specify one block ingestor
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      ETHEREUM_TRACE_STREAM_STEP_SIZE: 50
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-true}
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: ${FULLTEXT_SEARCH:-true}
      GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE: 200
      GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE: 500
      ETHEREUM_REORG_THRESHOLD: 200
      ETHEREUM_ANCESTOR_COUNT: 200
      ETHEREUM_BLOCK_BATCH_SIZE: 10
      ETHEREUM_RPC_MAX_PARALLEL_REQUESTS: 128
      STORE_CONNECTION_POOL_SIZE: 25
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: index-node-0
    expose:
      - 8001
      - 8000
      - 8020
      - 8030
      - 8040
    networks:
      - monitor-net
# ------------------------------AGENT--------------------------
  indexer-agent:
    image: ${IMAGE_AGENT}
    container_name: indexer-agent
    depends_on:
      - postgres-agent
      - index-node-0
      - query-node-0
      - fluentd
    environment:
      INDEXER_AGENT_RESTAKE_REWARDS: 'false'
      INDEXER_AGENT_ETHEREUM_NETWORK: ${INDEXER_AGENT_ETHEREUM_NETWORK}
      INDEXER_AGENT_ETHEREUM: '${INDEXER_AGENT_ETHEREUM}'
      INDEXER_AGENT_MNEMONIC: ${INDEXER_AGENT_MNEMONIC}
      INDEXER_AGENT_INDEXER_ADDRESS: ${INDEXER_AGENT_INDEXER_ADDRESS}
      INDEXER_AGENT_INDEX_NODE_IDS: "index_node_0"
      INDEXER_AGENT_GRAPH_NODE_QUERY_ENDPOINT: http://caddy:8000
      INDEXER_AGENT_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_AGENT_GRAPH_NODE_ADMIN_ENDPOINT: http://index-node-0:8020
      INDEXER_AGENT_INDEXER_MANAGEMENT_PORT: 18000
      INDEXER_AGENT_PUBLIC_INDEXER_URL: ${INDEXER_AGENT_PUBLIC_INDEXER_URL}
      INDEXER_AGENT_INDEXER_GEO_COORDINATES: {INDEXER_AGENT_INDEXER_GEO_COORDINATES}
      INDEXER_AGENT_NETWORK_SUBGRAPH_DEPLOYMENT: '${INDEXER_AGENT_NETWORK_SUBGRAPH_DEPLOYMENT}'
      INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT}
      INDEXER_AGENT_COLLECT_RECEIPTS_ENDPOINT: ${INDEXER_AGENT_COLLECT_RECEIPTS_ENDPOINT}
      INDEXER_AGENT_DAI_CONTRACT: ${INDEXER_AGENT_DAI_CONTRACT}
      INDEXER_AGENT_POSTGRES_HOST: postgres-agent
      INDEXER_AGENT_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_AGENT_POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      INDEXER_AGENT_POSTGRES_DATABASE: ${AGENT_DB_NAME:-indexer-agent}
      INDEXER_AGENT_OFFCHAIN_SUBGRAPHS: ${INDEXER_AGENT_OFFCHAIN_SUBGRAPHS}
#      VIRTUAL_HOST: ${AGENT_HOST:-agent.graphinx.ml}
#      VIRTUAL_PORT: 18000
#      LETSENCRYPT_HOST: ${AGENT_HOST:-agent.graphinx.ml}
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: indexer-agent
    expose:
      - 7600
      - 7300
      - 18000
      - 8002
      #- 8020
      #- 8030
    networks:
      - monitor-net
# ------------------------------SERVICE--------------------------
  indexer-service-0:
    image: ${IMAGE_SERVICE}
    container_name: indexer-service-0
    depends_on:
      - postgres-agent
      - index-node-0
      - query-node-0
      - fluentd
    environment:
      INDEXER_SERVICE_ETHEREUM_NETWORK: ${INDEXER_SERVICE_ETHEREUM_NETWORK}
      INDEXER_SERVICE_ETHEREUM: ${INDEXER_SERVICE_ETHEREUM}
      INDEXER_SERVICE_MNEMONIC: ${INDEXER_SERVICE_MNEMONIC}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${INDEXER_SERVICE_INDEXER_ADDRESS}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://caddy:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT: '${INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT}'
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT}
      INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS: ${INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS}
      INDEXER_SERVICE_WALLET_WORKER_THREADS: 8
      INDEXER_SERVICE_POSTGRES_HOST: postgres-agent
      INDEXER_SERVICE_POSTGRES_PORT: 5432
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${DB_NAME:-indexer-agent}
      SERVER_HOST: postgres-agent
      SERVER_PORT: 5432
      SERVER_DB_USER: ${DB_USER:-graph-node}
      SERVER_DB_PASSWORD: ${DB_PASS:-let-me-in}
      SERVER_DB_NAME: ${DB_NAME:-indexer-agent}
      VIRTUAL_HOST: ${SERVICE_HOST}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${SERVICE_HOST}
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: indexer-service-0
    expose:
      - 7600
      - 7300
    networks:
      - monitor-net
    restart: unless-stopped

# ------------------------------nginx-proxy--------------------------
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - monitor-net
    restart: unless-stopped
# ------------------------------nginx-ssl--------------------------
  nginx-ssl:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-ssl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - monitor-net
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      DEFAULT_EMAIL: ${EMAIL:-contact@grassets.tech}
      
# -----------------------------postgres-graph--------------------------
  postgres-graph:
    image: postgres
    shm_size: 1gb
    container_name: postgres-graph
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    command: ["-c", "shared_buffers=256MB", "-c", "max_connections=200"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      POSTGRES_DB: ${DB_NAME:-graph-node}
    volumes:
      - postgres_graph:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432

# -----------------------------postgres-agent--------------------------
  postgres-agent:
    image: postgres
    shm_size: 1gb
    container_name: postgres-agent
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    command: ["-c", "shared_buffers=256MB", "-c", "max_connections=200"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-let-me-in}
      POSTGRES_DB: ${DB_NAME:-indexer-agent}
    volumes:
      - postgres_agent:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432

# ------------------------------FLUENT--------------------------
  fluentd:
    image: fluent/fluentd:latest
    container_name: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - /home/graph/fluentd/log/:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"

# ------------------------------FLUENT--------------------------
  prometheus:
    image: prom/prometheus:v2.20.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    environment:
      - VIRTUAL_HOST=${INDEX_HOST:-prometheus-1.graphinx.grassets.tech}
      - VIRTUAL_PORT=9090
      - LETSENCRYPT_HOST=${INDEX_HOST:-prometheus-1.graphinx.grassets.tech}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

# ------------------------------PROMETHEUS--------------------------
  prometheus:
    image: prom/prometheus:v2.20.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    environment:
      - VIRTUAL_HOST=${PROMETHEUS_HOST}
      - VIRTUAL_PORT=9090
      - LETSENCRYPT_HOST=${PROMETHEUS_HOST}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
 
 # ------------------------------ALERTMANAGER--------------------------
  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
 
 # ------------------------------NODEEXPORTER--------------------------
  nodeexporter:
    image: prom/node-exporter:v1.0.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

 # ------------------------------CADVISOR--------------------------
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.38.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
 
 # ------------------------------GRAFANA--------------------------
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - GF_LOG_FILTERS=rendering:debug
      - postgres_host=postgres-graph
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-let-me-in}
      - postgres_db=${DB_NAME:-graph-node}
      - VIRTUAL_HOST=${GRAFANA_HOST}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${GRAFANA_HOST}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

 # ------------------------------PUSHGATEWAY--------------------------
  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

# ------------------------------CADDY--------------------------
  caddy:
    image: caddy:latest
    container_name: caddy
    expose:
      - 8000
    ports:
      #- "3000:3000"
      #- "8000:8000"
      - "8001:8001"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

# ------------------------------PGADMIN--------------------------
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      VIRTUAL_HOST: ${PGADMIN_HOST}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: ${PGADMIN_HOST}
    volumes:
       - pgadmin:/var/lib/pgadmin
    expose:
      - 80
    networks:
      - monitor-net
    restart: unless-stopped

# ------------------------------SHELL--------------------------
  shell-tools:
    container_name: shell-tools
    image: davaymne/shell-tools:v0.16.0.1
    volumes:
       - ./tools:/root/tools/
    networks:
       - monitor-net
    restart: unless-stopped
    tty: true
